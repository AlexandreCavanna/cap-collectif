// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ArgumentsBox /> should render correctly with a for/against commentSystem 1`] = `
<Fragment>
  <div
    id="argument-list-top-scroll"
  />
  <Row
    bsClass="row"
    componentClass="div"
  >
    <ArgumentsBox__Switcher
      className="btn-group"
      id="arguments-view-switcher"
      role="group"
      sm={12}
    >
      <Button
        active={true}
        aria-checked={true}
        block={false}
        bsClass="btn"
        bsStyle="default"
        disabled={false}
        onClick={[Function]}
        role="checkbox"
      >
        <FormattedMessage
          id="argument.show.type.for"
          values={Object {}}
        />
      </Button>
      <Button
        active={false}
        aria-checked={false}
        block={false}
        bsClass="btn"
        bsStyle="default"
        disabled={false}
        onClick={[Function]}
        role="checkbox"
      >
        <FormattedMessage
          id="argument.show.type.against"
          values={Object {}}
        />
      </Button>
    </ArgumentsBox__Switcher>
    <ArgumentsBox__ArgumentsCol
      hide={false}
      md={6}
      sm={12}
    >
      <div
        id="arguments-col--FOR"
      >
        <div
          className="opinion opinion--add-argument block block--bordered"
        >
          <Relay(Connect(ReduxForm))
            argumentable={
              Object {
                " $fragmentRefs": null,
                " $refType": null,
                "section": Object {
                  "commentSystem": 2,
                },
              }
            }
            form="create-argument-FOR"
            type="FOR"
          />
        </div>
        <Relay(Connect(UnpublishedArgumentListRenderer))
          argumentable={
            Object {
              " $fragmentRefs": null,
              " $refType": null,
              "section": Object {
                "commentSystem": 2,
              },
            }
          }
          type="FOR"
        />
        <Relay(Connect(ArgumentList))
          argumentable={
            Object {
              " $fragmentRefs": null,
              " $refType": null,
              "section": Object {
                "commentSystem": 2,
              },
            }
          }
          type="FOR"
        />
      </div>
    </ArgumentsBox__ArgumentsCol>
    <ArgumentsBox__ArgumentsCol
      hide={true}
      md={6}
      sm={12}
    >
      <div
        id="arguments-col--AGAINST"
      >
        <div
          className="opinion opinion--add-argument block block--bordered"
        >
          <Relay(Connect(ReduxForm))
            argumentable={
              Object {
                " $fragmentRefs": null,
                " $refType": null,
                "section": Object {
                  "commentSystem": 2,
                },
              }
            }
            form="create-argument-AGAINST"
            type="AGAINST"
          />
        </div>
        <Relay(Connect(UnpublishedArgumentListRenderer))
          argumentable={
            Object {
              " $fragmentRefs": null,
              " $refType": null,
              "section": Object {
                "commentSystem": 2,
              },
            }
          }
          type="AGAINST"
        />
        <Relay(Connect(ArgumentList))
          argumentable={
            Object {
              " $fragmentRefs": null,
              " $refType": null,
              "section": Object {
                "commentSystem": 2,
              },
            }
          }
          type="AGAINST"
        />
      </div>
    </ArgumentsBox__ArgumentsCol>
  </Row>
</Fragment>
`;

exports[`<ArgumentsBox /> should render correctly with a simple commentSystem 1`] = `
<div
  id="arguments-col--SIMPLE"
>
  <div
    className="opinion opinion--add-argument block block--bordered"
  >
    <Relay(Connect(ReduxForm))
      argumentable={
        Object {
          " $fragmentRefs": null,
          " $refType": null,
          "section": Object {
            "commentSystem": 1,
          },
        }
      }
      form="create-argument-SIMPLE"
      type="SIMPLE"
    />
  </div>
  <Relay(Connect(UnpublishedArgumentListRenderer))
    argumentable={
      Object {
        " $fragmentRefs": null,
        " $refType": null,
        "section": Object {
          "commentSystem": 1,
        },
      }
    }
    type="SIMPLE"
  />
  <Relay(Connect(ArgumentList))
    argumentable={
      Object {
        " $fragmentRefs": null,
        " $refType": null,
        "section": Object {
          "commentSystem": 1,
        },
      }
    }
    type="SIMPLE"
  />
</div>
`;

exports[`<ArgumentsBox /> should return null with incorrect section commentSystem 1`] = `""`;

exports[`<ArgumentsBox /> should return null with no section 1`] = `""`;
