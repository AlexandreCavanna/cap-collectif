// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DashboardCampaign /> should renders correctly 1`] = `
<Fragment>
  <DashboardCampaignstyle__Header>
    <InlineSelect
      onChange={[Function]}
      value="ALL"
    >
      <InlineSelect.Choice
        value="ALL"
      >
        <FormattedMessage
          id="filter.count.status.all"
          values={
            Object {
              "num": 4,
            }
          }
        />
      </InlineSelect.Choice>
      <InlineSelect.Choice
        value="SENT"
      >
        <FormattedMessage
          id="filter.count.status.sent"
          values={
            Object {
              "num": 1,
            }
          }
        />
      </InlineSelect.Choice>
      <InlineSelect.Choice
        value="PLANNED"
      >
        <FormattedMessage
          id="filter.count.status.planned"
          values={
            Object {
              "num": 1,
            }
          }
        />
      </InlineSelect.Choice>
      <InlineSelect.Choice
        value="DRAFT"
      >
        <FormattedMessage
          id="filter.count.status.draft"
          values={
            Object {
              "num": 2,
            }
          }
        />
      </InlineSelect.Choice>
    </InlineSelect>
    <div>
      <ClearableInput
        disabled={false}
        icon={
          <i
            className="cap cap-magnifier"
          />
        }
        id="search"
        initialValue={null}
        name="search"
        onClear={[Function]}
        onSubmit={[Function]}
        placeholder="global.menu.search"
        type="text"
      />
      <DashboardCampaignstyle__ButtonCreate
        onClick={[Function]}
        type="button"
      >
        <FormattedMessage
          id="create-mail"
          values={Object {}}
        />
      </DashboardCampaignstyle__ButtonCreate>
    </div>
  </DashboardCampaignstyle__Header>
  <PickableList
    hasMore={false}
    isLoading={false}
    loader={<EmailingLoader />}
    onScrollToBottom={[Function]}
    useInfiniteScroll={true}
  >
    <DashboardCampaignstyle__DashboardCampaignHeader
      disabled={false}
      isSelectable={true}
    >
      <DashboardHeader
        emailingCampaignOwner={
          Object {
            " $refType": null,
            "campaigns": Object {
              "edges": Array [
                Object {
                  "cursor": "YToyOntpOjA7aToxNDg1OTAzNjAwMDAwO2k6MTtzOjk6InByb3Bvc2FsMSI7fQ==",
                  "node": Object {
                    " $fragmentRefs": null,
                    "creator": Object {
                      "id": "viewerId",
                    },
                    "id": "1",
                    "status": "SENT",
                  },
                },
                Object {
                  "cursor": "YToyOntpOjA7aToxNDg1OTAzNjAwMDAwO2k6MTtzOjk6InByb3Bvc2FsMSI8fQ==",
                  "node": Object {
                    " $fragmentRefs": null,
                    "creator": Object {
                      "id": "viewerId",
                    },
                    "id": "1",
                    "status": "DRAFT",
                  },
                },
              ],
              "pageInfo": Object {
                "hasNextPage": false,
              },
              "totalCount": 2,
            },
            "campaignsAll": Object {
              "totalCount": 4,
            },
            "campaignsDraft": Object {
              "totalCount": 2,
            },
            "campaignsPlanned": Object {
              "totalCount": 1,
            },
            "campaignsSent": Object {
              "totalCount": 1,
            },
          }
        }
        showModalDelete={[Function]}
        viewer={
          Object {
            " $refType": null,
            "id": "viewerId",
            "isAdminOrganization": false,
            "isOnlyProjectAdmin": false,
            "organizations": null,
          }
        }
      />
    </DashboardCampaignstyle__DashboardCampaignHeader>
    <PickableList.Body>
      <Relay(CampaignItem)
        campaign={
          Object {
            " $fragmentRefs": null,
            "creator": Object {
              "id": "viewerId",
            },
            "id": "1",
            "status": "SENT",
          }
        }
        key="1"
        rowId="1"
        selected={false}
      />
      <Relay(CampaignItem)
        campaign={
          Object {
            " $fragmentRefs": null,
            "creator": Object {
              "id": "viewerId",
            },
            "id": "1",
            "status": "DRAFT",
          }
        }
        key="1"
        rowId="1"
        selected={false}
      />
    </PickableList.Body>
  </PickableList>
  <ModalConfirmDelete
    campaignsIds={Array []}
    onClose={[Function]}
    show={false}
  />
  <ModalOnboarding
    isOnlyProjectAdmin={false}
  />
</Fragment>
`;

exports[`<DashboardCampaign /> should renders correctly with no campaigns 1`] = `
<Fragment>
  <DashboardCampaignstyle__Header>
    <InlineSelect
      onChange={[Function]}
      value="ALL"
    >
      <InlineSelect.Choice
        value="ALL"
      >
        <FormattedMessage
          id="filter.count.status.all"
          values={
            Object {
              "num": 0,
            }
          }
        />
      </InlineSelect.Choice>
      <InlineSelect.Choice
        value="SENT"
      >
        <FormattedMessage
          id="filter.count.status.sent"
          values={
            Object {
              "num": 0,
            }
          }
        />
      </InlineSelect.Choice>
      <InlineSelect.Choice
        value="PLANNED"
      >
        <FormattedMessage
          id="filter.count.status.planned"
          values={
            Object {
              "num": 0,
            }
          }
        />
      </InlineSelect.Choice>
      <InlineSelect.Choice
        value="DRAFT"
      >
        <FormattedMessage
          id="filter.count.status.draft"
          values={
            Object {
              "num": 0,
            }
          }
        />
      </InlineSelect.Choice>
    </InlineSelect>
    <div>
      <ClearableInput
        disabled={false}
        icon={
          <i
            className="cap cap-magnifier"
          />
        }
        id="search"
        initialValue={null}
        name="search"
        onClear={[Function]}
        onSubmit={[Function]}
        placeholder="global.menu.search"
        type="text"
      />
      <DashboardCampaignstyle__ButtonCreate
        onClick={[Function]}
        type="button"
      >
        <FormattedMessage
          id="create-mail"
          values={Object {}}
        />
      </DashboardCampaignstyle__ButtonCreate>
    </div>
  </DashboardCampaignstyle__Header>
  <PickableList
    hasMore={false}
    isLoading={false}
    loader={<EmailingLoader />}
    onScrollToBottom={[Function]}
    useInfiniteScroll={true}
  >
    <DashboardCampaignstyle__DashboardCampaignHeader
      disabled={false}
      isSelectable={true}
    >
      <DashboardHeader
        emailingCampaignOwner={
          Object {
            " $refType": null,
            "campaigns": Object {
              "edges": Array [],
              "pageInfo": Object {
                "hasNextPage": false,
              },
              "totalCount": 2,
            },
            "campaignsAll": Object {
              "totalCount": 0,
            },
            "campaignsDraft": Object {
              "totalCount": 0,
            },
            "campaignsPlanned": Object {
              "totalCount": 0,
            },
            "campaignsSent": Object {
              "totalCount": 0,
            },
          }
        }
        showModalDelete={[Function]}
        viewer={
          Object {
            " $refType": null,
            "id": "viewerId",
            "isAdminOrganization": false,
            "isOnlyProjectAdmin": false,
            "organizations": null,
          }
        }
      />
    </DashboardCampaignstyle__DashboardCampaignHeader>
    <PickableList.Body />
  </PickableList>
  <ModalConfirmDelete
    campaignsIds={Array []}
    onClose={[Function]}
    show={false}
  />
  <ModalOnboarding
    isOnlyProjectAdmin={false}
  />
</Fragment>
`;
