// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TabsBarDropdown /> should render correctly 1`] = `
<Fragment
  key="6"
>
  <Memo(ForwardRef(MenuButton))
    animated={false}
    animating={false}
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "align": "center",
            "direction": "row",
            "height": "100%",
          },
        ],
        "componentStyle": e {
          "baseHash": -861558889,
          "baseStyle": undefined,
          "componentId": "styles__DropdownToggle-ckofMh",
          "isStatic": false,
          "rules": Array [
            ".caret{margin-left:5px;}padding:8px 16px;",
            [Function],
            " &:hover,&:focus{color:",
            [Function],
            ";background-color:",
            [Function],
            ";}",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": Array [],
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "styles__DropdownToggle-ckofMh",
        "target": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    baseId="mock"
    down={[Function]}
    first={[Function]}
    groups={Array []}
    hide={[Function]}
    id="tabsbar-item-6"
    isOpen={false}
    items={Array []}
    last={[Function]}
    loop={false}
    modal={false}
    move={[Function]}
    next={[Function]}
    orientation="vertical"
    place={[Function]}
    placement="bottom-start"
    previous={[Function]}
    registerGroup={[Function]}
    registerItem={[Function]}
    reset={[Function]}
    rtl={false}
    setAnimated={[Function]}
    setBaseId={[Function]}
    setCurrentId={[Function]}
    setLoop={[Function]}
    setModal={[Function]}
    setOrientation={[Function]}
    setRTL={[Function]}
    setShift={[Function]}
    setVisible={[Function]}
    setWrap={[Function]}
    shift={false}
    show={[Function]}
    sort={[Function]}
    stopAnimation={[Function]}
    toggle={[Function]}
    unregisterGroup={[Function]}
    unregisterItem={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_hasActiveWidget={false}
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_includesBaseElement={false}
    unstable_moves={0}
    unstable_originalPlacement="bottom-start"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_setHasActiveWidget={[Function]}
    unstable_setIncludesBaseElement={[Function]}
    unstable_setValue={[Function]}
    unstable_setVirtual={[Function]}
    unstable_update={[Function]}
    unstable_values={Object {}}
    unstable_virtual={false}
    up={[Function]}
    visible={false}
    wrap={false}
  >
    Comment ça marche
    <span
      className="caret"
    />
  </Memo(ForwardRef(MenuButton))>
  <ForwardRef(Menu)
    animated={false}
    animating={false}
    aria-label="Comment ça marche"
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "align": "center",
            "boxShadow": "rgb(0 0 0 / 18%) 0px 6px 12px",
            "direction": "column",
            "fontSize": "14px",
            "overflow": "hidden",
            "py": 1,
          },
        ],
        "componentStyle": e {
          "baseHash": -1788907091,
          "baseStyle": undefined,
          "componentId": "styles__DropdownMenu-OiPbk",
          "isStatic": false,
          "rules": Array [
            "border-radius:0 0 4px 4px;background-color:",
            [Function],
            ";&:hover,&:focus{outline:none;}a{width:100%;font-weight:400;padding:3px 20px;}@media (max-width:",
            "767px",
            "){a{text-align:left;}}",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": Array [],
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "styles__DropdownMenu-OiPbk",
        "target": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    baseId="mock"
    down={[Function]}
    first={[Function]}
    groups={Array []}
    hide={[Function]}
    hideOnClickOutside={true}
    items={Array []}
    key="menu-6"
    last={[Function]}
    loop={false}
    modal={false}
    move={[Function]}
    next={[Function]}
    orientation="vertical"
    place={[Function]}
    placement="bottom-start"
    previous={[Function]}
    registerGroup={[Function]}
    registerItem={[Function]}
    reset={[Function]}
    rtl={false}
    setAnimated={[Function]}
    setBaseId={[Function]}
    setCurrentId={[Function]}
    setLoop={[Function]}
    setModal={[Function]}
    setOrientation={[Function]}
    setRTL={[Function]}
    setShift={[Function]}
    setVisible={[Function]}
    setWrap={[Function]}
    shift={false}
    show={[Function]}
    sort={[Function]}
    stopAnimation={[Function]}
    toggle={[Function]}
    unregisterGroup={[Function]}
    unregisterItem={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_hasActiveWidget={false}
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_includesBaseElement={false}
    unstable_moves={0}
    unstable_originalPlacement="bottom-start"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_setHasActiveWidget={[Function]}
    unstable_setIncludesBaseElement={[Function]}
    unstable_setValue={[Function]}
    unstable_setVirtual={[Function]}
    unstable_update={[Function]}
    unstable_values={Object {}}
    unstable_virtual={false}
    up={[Function]}
    visible={false}
    wrap={false}
  />
</Fragment>
`;

exports[`<TabsBarDropdown /> should render correctly with multiple children 1`] = `
<Fragment
  key="6"
>
  <Memo(ForwardRef(MenuButton))
    animated={false}
    animating={false}
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "align": "center",
            "direction": "row",
            "height": "100%",
          },
        ],
        "componentStyle": e {
          "baseHash": -861558889,
          "baseStyle": undefined,
          "componentId": "styles__DropdownToggle-ckofMh",
          "isStatic": false,
          "rules": Array [
            ".caret{margin-left:5px;}padding:8px 16px;",
            [Function],
            " &:hover,&:focus{color:",
            [Function],
            ";background-color:",
            [Function],
            ";}",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": Array [],
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "styles__DropdownToggle-ckofMh",
        "target": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    baseId="mock"
    down={[Function]}
    first={[Function]}
    groups={Array []}
    hide={[Function]}
    id="tabsbar-item-6"
    isOpen={false}
    items={Array []}
    last={[Function]}
    loop={false}
    modal={false}
    move={[Function]}
    next={[Function]}
    orientation="vertical"
    place={[Function]}
    placement="bottom-start"
    previous={[Function]}
    registerGroup={[Function]}
    registerItem={[Function]}
    reset={[Function]}
    rtl={false}
    setAnimated={[Function]}
    setBaseId={[Function]}
    setCurrentId={[Function]}
    setLoop={[Function]}
    setModal={[Function]}
    setOrientation={[Function]}
    setRTL={[Function]}
    setShift={[Function]}
    setVisible={[Function]}
    setWrap={[Function]}
    shift={false}
    show={[Function]}
    sort={[Function]}
    stopAnimation={[Function]}
    toggle={[Function]}
    unregisterGroup={[Function]}
    unregisterItem={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_hasActiveWidget={false}
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_includesBaseElement={false}
    unstable_moves={0}
    unstable_originalPlacement="bottom-start"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_setHasActiveWidget={[Function]}
    unstable_setIncludesBaseElement={[Function]}
    unstable_setValue={[Function]}
    unstable_setVirtual={[Function]}
    unstable_update={[Function]}
    unstable_values={Object {}}
    unstable_virtual={false}
    up={[Function]}
    visible={false}
    wrap={false}
  >
    Comment ça marche
    <span
      className="caret"
    />
  </Memo(ForwardRef(MenuButton))>
  <ForwardRef(Menu)
    animated={false}
    animating={false}
    aria-label="Comment ça marche"
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "align": "center",
            "boxShadow": "rgb(0 0 0 / 18%) 0px 6px 12px",
            "direction": "column",
            "fontSize": "14px",
            "overflow": "hidden",
            "py": 1,
          },
        ],
        "componentStyle": e {
          "baseHash": -1788907091,
          "baseStyle": undefined,
          "componentId": "styles__DropdownMenu-OiPbk",
          "isStatic": false,
          "rules": Array [
            "border-radius:0 0 4px 4px;background-color:",
            [Function],
            ";&:hover,&:focus{outline:none;}a{width:100%;font-weight:400;padding:3px 20px;}@media (max-width:",
            "767px",
            "){a{text-align:left;}}",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": Array [],
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "styles__DropdownMenu-OiPbk",
        "target": Object {
          "$$typeof": Symbol(react.forward_ref),
          "render": [Function],
        },
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    baseId="mock"
    down={[Function]}
    first={[Function]}
    groups={Array []}
    hide={[Function]}
    hideOnClickOutside={true}
    items={Array []}
    key="menu-6"
    last={[Function]}
    loop={false}
    modal={false}
    move={[Function]}
    next={[Function]}
    orientation="vertical"
    place={[Function]}
    placement="bottom-start"
    previous={[Function]}
    registerGroup={[Function]}
    registerItem={[Function]}
    reset={[Function]}
    rtl={false}
    setAnimated={[Function]}
    setBaseId={[Function]}
    setCurrentId={[Function]}
    setLoop={[Function]}
    setModal={[Function]}
    setOrientation={[Function]}
    setRTL={[Function]}
    setShift={[Function]}
    setVisible={[Function]}
    setWrap={[Function]}
    shift={false}
    show={[Function]}
    sort={[Function]}
    stopAnimation={[Function]}
    toggle={[Function]}
    unregisterGroup={[Function]}
    unregisterItem={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_hasActiveWidget={false}
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_includesBaseElement={false}
    unstable_moves={0}
    unstable_originalPlacement="bottom-start"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_setHasActiveWidget={[Function]}
    unstable_setIncludesBaseElement={[Function]}
    unstable_setValue={[Function]}
    unstable_setVirtual={[Function]}
    unstable_update={[Function]}
    unstable_values={Object {}}
    unstable_virtual={false}
    up={[Function]}
    visible={false}
    wrap={false}
  >
    <Memo(ForwardRef(MenuItem))
      active={false}
      animated={false}
      animating={false}
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -1015264920,
            "baseStyle": undefined,
            "componentId": "styles__TabsLink-eEYuCY",
            "isStatic": false,
            "rules": Array [
              "color:",
              [Function],
              ";text-decoration:none;text-align:left;",
              [Function],
              " &:hover,&:focus{color:",
              [Function],
              ";background-color:",
              [Function],
              ";text-decoration:none;outline:none;}",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "styles__TabsLink-eEYuCY",
          "target": "a",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      baseId="mock"
      down={[Function]}
      first={[Function]}
      groups={Array []}
      hide={[Function]}
      href="/contact"
      items={Array []}
      key="0"
      last={[Function]}
      loop={false}
      modal={false}
      move={[Function]}
      next={[Function]}
      orientation="vertical"
      place={[Function]}
      placement="bottom-start"
      previous={[Function]}
      registerGroup={[Function]}
      registerItem={[Function]}
      reset={[Function]}
      rtl={false}
      setAnimated={[Function]}
      setBaseId={[Function]}
      setCurrentId={[Function]}
      setLoop={[Function]}
      setModal={[Function]}
      setOrientation={[Function]}
      setRTL={[Function]}
      setShift={[Function]}
      setVisible={[Function]}
      setWrap={[Function]}
      shift={false}
      show={[Function]}
      sort={[Function]}
      stopAnimation={[Function]}
      toggle={[Function]}
      unregisterGroup={[Function]}
      unregisterItem={[Function]}
      unstable_arrowRef={
        Object {
          "current": null,
        }
      }
      unstable_arrowStyles={Object {}}
      unstable_disclosureRef={
        Object {
          "current": null,
        }
      }
      unstable_hasActiveWidget={false}
      unstable_idCountRef={
        Object {
          "current": 0,
        }
      }
      unstable_includesBaseElement={false}
      unstable_moves={0}
      unstable_originalPlacement="bottom-start"
      unstable_popoverRef={
        Object {
          "current": null,
        }
      }
      unstable_popoverStyles={
        Object {
          "left": "100%",
          "position": "fixed",
          "top": "100%",
        }
      }
      unstable_referenceRef={
        Object {
          "current": null,
        }
      }
      unstable_setHasActiveWidget={[Function]}
      unstable_setIncludesBaseElement={[Function]}
      unstable_setValue={[Function]}
      unstable_setVirtual={[Function]}
      unstable_update={[Function]}
      unstable_values={Object {}}
      unstable_virtual={false}
      up={[Function]}
      visible={false}
      wrap={false}
    >
      Contact
    </Memo(ForwardRef(MenuItem))>
    <Memo(ForwardRef(MenuItem))
      active={false}
      animated={false}
      animating={false}
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -1015264920,
            "baseStyle": undefined,
            "componentId": "styles__TabsLink-eEYuCY",
            "isStatic": false,
            "rules": Array [
              "color:",
              [Function],
              ";text-decoration:none;text-align:left;",
              [Function],
              " &:hover,&:focus{color:",
              [Function],
              ";background-color:",
              [Function],
              ";text-decoration:none;outline:none;}",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": Array [],
          "render": [Function],
          "shouldForwardProp": undefined,
          "styledComponentId": "styles__TabsLink-eEYuCY",
          "target": "a",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      baseId="mock"
      down={[Function]}
      first={[Function]}
      groups={Array []}
      hide={[Function]}
      href="/members"
      items={Array []}
      key="1"
      last={[Function]}
      loop={false}
      modal={false}
      move={[Function]}
      next={[Function]}
      orientation="vertical"
      place={[Function]}
      placement="bottom-start"
      previous={[Function]}
      registerGroup={[Function]}
      registerItem={[Function]}
      reset={[Function]}
      rtl={false}
      setAnimated={[Function]}
      setBaseId={[Function]}
      setCurrentId={[Function]}
      setLoop={[Function]}
      setModal={[Function]}
      setOrientation={[Function]}
      setRTL={[Function]}
      setShift={[Function]}
      setVisible={[Function]}
      setWrap={[Function]}
      shift={false}
      show={[Function]}
      sort={[Function]}
      stopAnimation={[Function]}
      toggle={[Function]}
      unregisterGroup={[Function]}
      unregisterItem={[Function]}
      unstable_arrowRef={
        Object {
          "current": null,
        }
      }
      unstable_arrowStyles={Object {}}
      unstable_disclosureRef={
        Object {
          "current": null,
        }
      }
      unstable_hasActiveWidget={false}
      unstable_idCountRef={
        Object {
          "current": 0,
        }
      }
      unstable_includesBaseElement={false}
      unstable_moves={0}
      unstable_originalPlacement="bottom-start"
      unstable_popoverRef={
        Object {
          "current": null,
        }
      }
      unstable_popoverStyles={
        Object {
          "left": "100%",
          "position": "fixed",
          "top": "100%",
        }
      }
      unstable_referenceRef={
        Object {
          "current": null,
        }
      }
      unstable_setHasActiveWidget={[Function]}
      unstable_setIncludesBaseElement={[Function]}
      unstable_setValue={[Function]}
      unstable_setVirtual={[Function]}
      unstable_update={[Function]}
      unstable_values={Object {}}
      unstable_virtual={false}
      up={[Function]}
      visible={false}
      wrap={false}
    >
      Liste des inscrits
    </Memo(ForwardRef(MenuItem))>
  </ForwardRef(Menu)>
</Fragment>
`;
