// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DropdownSelect /> should render correctly 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with a message 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Message>
        <p>
          Je suis un beau message
        </p>
      </DropdownSelect.Message>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with a message that has an icon 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Message
        icon={
          <Icon
            name="information"
          />
        }
      >
        <p>
          Je suis un beau message avec une icône qui vous informe que The Promised Neverland est très cool
        </p>
      </DropdownSelect.Message>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with a submenu 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
      <DropdownSelect.Menu
        name="Submenu 1"
      >
        <DropdownSelect.Choice
          value="submenuItem1"
        >
          Submenu 1 item 1
        </DropdownSelect.Choice>
        <DropdownSelect.Choice
          value="submenuItem2"
        >
          Submenu 1 item 2
        </DropdownSelect.Choice>
      </DropdownSelect.Menu>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 4
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with default value 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": "item1",
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": "item3",
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with disabled choices 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        disabled={true}
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        disabled={true}
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with disabled dropdown 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": true,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        disabled={true}
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        disabled={true}
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with indeterminate choices 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        isIndeterminate={true}
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        isIndeterminate={true}
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with multi-select enabled 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": true,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with separators 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Separator>
        Item 1
      </DropdownSelect.Separator>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1.1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 1.2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 1.3
      </DropdownSelect.Choice>
      <DropdownSelect.Separator>
        Item 2
      </DropdownSelect.Separator>
      <DropdownSelect.Choice
        value="item4"
      >
        Item 2.1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item5"
      >
        Item 2.2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item6"
      >
        Item 2.3
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;

exports[`<DropdownSelect /> should render correctly with submenu in a submenu 1`] = `
<ContextProvider
  value={
    Object {
      "allValues": Array [],
      "defaultValue": undefined,
      "disabled": false,
      "initialValue": Array [],
      "isMultiSelect": false,
      "mode": "normal",
      "onChange": undefined,
      "setInitialValue": [Function],
      "value": undefined,
    }
  }
>
  <indexstyle__Container
    shouldOverflow={false}
  >
    <indexstyle__Header>
      Trier par
    </indexstyle__Header>
    <indexstyle__Body>
      <DropdownSelect.Choice
        value="item1"
      >
        Item 1
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item2"
      >
        Item 2
      </DropdownSelect.Choice>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 3
      </DropdownSelect.Choice>
      <DropdownSelect.Menu
        name="Submenu 1"
      >
        <DropdownSelect.Choice
          value="submenuItem1"
        >
          Submenu 1 item 1
        </DropdownSelect.Choice>
        <DropdownSelect.Choice
          value="submenuItem2"
        >
          Submenu 1 item 2
        </DropdownSelect.Choice>
        <DropdownSelect.Menu
          name="Submenu 2"
        >
          <DropdownSelect.Choice
            value="submenuItem2-1"
          >
            Submenu 2 item 1
          </DropdownSelect.Choice>
          <DropdownSelect.Choice
            value="submenuItem2-2"
          >
            Submenu 2 item 2
          </DropdownSelect.Choice>
        </DropdownSelect.Menu>
      </DropdownSelect.Menu>
      <DropdownSelect.Choice
        value="item3"
      >
        Item 4
      </DropdownSelect.Choice>
    </indexstyle__Body>
  </indexstyle__Container>
</ContextProvider>
`;
