// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LoginOverlay /> renders children if not enabled 1`] = `
<div
  className="foo"
/>
`;

exports[`<LoginOverlay /> renders children if user is logged 1`] = `
<div
  className="foo"
/>
`;

exports[`<LoginOverlay /> renders popover if user is not logged 1`] = `
<Fragment>
  <Memo(ForwardRef(PopoverDisclosure))
    animated={false}
    animating={false}
    baseId="mock"
    className="foo"
    hide={[Function]}
    modal={false}
    onClick={null}
    place={[Function]}
    placement="bottom"
    setAnimated={[Function]}
    setBaseId={[Function]}
    setModal={[Function]}
    setVisible={[Function]}
    show={[Function]}
    stopAnimation={[Function]}
    toggle={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_originalPlacement="bottom"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_update={[Function]}
    visible={false}
  >
    <Component />
  </Memo(ForwardRef(PopoverDisclosure))>
  <ForwardRef(Popover)
    animated={false}
    animating={false}
    aria-label="vote.popover.title"
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "maxWidth": "280px",
            "zIndex": 100,
          },
        ],
        "componentStyle": e {
          "baseHash": -1884068249,
          "baseStyle": e {
            "baseHash": -120292040,
            "baseStyle": undefined,
            "componentId": "sc-bcXGCL",
            "isStatic": false,
            "rules": Array [
              [Function],
              [Function],
            ],
            "staticRulesId": "",
          },
          "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
          "isStatic": false,
          "rules": Array [
            "outline:none;",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": "sc-bcXGCL",
        "render": [Function],
        "shouldForwardProp": [Function],
        "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
        "target": "div",
        "warnTooManyClasses": [Function],
      }
    }
    baseId="mock"
    borderRadius="popover"
    boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
    hide={[Function]}
    id="login-popover"
    modal={false}
    place={[Function]}
    placement="bottom"
    setAnimated={[Function]}
    setBaseId={[Function]}
    setModal={[Function]}
    setVisible={[Function]}
    show={[Function]}
    stopAnimation={[Function]}
    tabIndex={0}
    toggle={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_originalPlacement="bottom"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_update={[Function]}
    visible={false}
  >
    <Memo(ForwardRef(PopoverArrow))
      animated={false}
      animating={false}
      as={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": e {
            "baseHash": -2029907114,
            "baseStyle": e {
              "baseHash": -120292040,
              "baseStyle": undefined,
              "componentId": "sc-bcXGCL",
              "isStatic": false,
              "rules": Array [
                [Function],
                [Function],
              ],
              "staticRulesId": "",
            },
            "componentId": "LoginOverlay__Arrow-jnwUOf",
            "isStatic": false,
            "rules": Array [
              ".stroke{fill:none;}.fill{fill:",
              [Function],
              ";}",
            ],
            "staticRulesId": "",
          },
          "foldedComponentIds": "sc-bcXGCL",
          "render": [Function],
          "shouldForwardProp": [Function],
          "styledComponentId": "LoginOverlay__Arrow-jnwUOf",
          "target": "div",
          "warnTooManyClasses": [Function],
        }
      }
      baseId="mock"
      hide={[Function]}
      modal={false}
      place={[Function]}
      placement="bottom"
      position="bottom"
      setAnimated={[Function]}
      setBaseId={[Function]}
      setModal={[Function]}
      setVisible={[Function]}
      show={[Function]}
      stopAnimation={[Function]}
      toggle={[Function]}
      unstable_arrowRef={
        Object {
          "current": null,
        }
      }
      unstable_arrowStyles={Object {}}
      unstable_disclosureRef={
        Object {
          "current": null,
        }
      }
      unstable_idCountRef={
        Object {
          "current": 0,
        }
      }
      unstable_originalPlacement="bottom"
      unstable_popoverRef={
        Object {
          "current": null,
        }
      }
      unstable_popoverStyles={
        Object {
          "left": "100%",
          "position": "fixed",
          "top": "100%",
        }
      }
      unstable_referenceRef={
        Object {
          "current": null,
        }
      }
      unstable_update={[Function]}
      visible={false}
    />
    <AppBox
      bg="white"
      borderRadius="popover"
      color="black"
      overflow="hidden"
    >
      <Text
        bg="#f7f7f7"
        borderBottom="normal"
        borderColor="#ebebeb"
        fontSize={3}
        mb="0 !important"
        px={3}
        py="8px !important"
        textAlign="left !important"
      >
        vote.popover.title
      </Text>
      <ForwardRef
        direction="column"
        px={3}
        py="10px"
        spacing="10px"
      >
        <Text
          fontSize={3}
          mb="0 !important"
          pb="0 !important"
          textAlign="left !important"
        >
          vote.popover.body
        </Text>
        <VisuallyHidden>
          <Button
            onClick={[Function]}
          >
            global.close
          </Button>
        </VisuallyHidden>
        <Connect(LoginButton)
          bsStyle="success"
          className="center-block btn-block login-button"
        />
      </ForwardRef>
    </AppBox>
  </ForwardRef(Popover)>
</Fragment>
`;
