// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<QuestionnaireReplyPage /> renders correctly 1`] = `
<ContextProvider
  value={
    Object {
      "environment": "RelayModernEnvironment()",
    }
  }
>
  <QuestionnaireReplyPage
    dataPrefetch={
      Object {
        "dispose": [MockFunction],
        "getValue": [MockFunction],
        "next": [MockFunction],
        "subscribe": [MockFunction],
      }
    }
    isAuthenticated={true}
    match={
      Object {
        "isExact": false,
        "params": Object {
          "id": "reply123",
        },
        "path": "https://questionnaire/replies/reply123",
        "url": "https://questionnaire/replies/reply123",
      }
    }
    questionnaire={
      Object {
        " $refType": null,
        "id": "abc",
        "step": Object {
          " $fragmentRefs": null,
        },
        "viewerReplies": Object {
          "edges": Array [
            Object {
              "node": Object {
                "id": "1",
              },
            },
            Object {
              "node": Object {
                "id": "2",
              },
            },
          ],
          "totalCount": 2,
        },
      }
    }
    resetReplyForm={[MockFunction]}
    submitReplyForm={[MockFunction]}
  />
  ,
</ContextProvider>
`;

exports[`<QuestionnaireReplyPage /> renders correctly when data not preloaded 1`] = `
<ContextProvider
  value={
    Object {
      "environment": "RelayModernEnvironment()",
    }
  }
>
  <QuestionnaireReplyPage
    dataPrefetch={null}
    isAuthenticated={true}
    match={
      Object {
        "isExact": false,
        "params": Object {
          "id": "reply123",
        },
        "path": "https://questionnaire/replies/reply123",
        "url": "https://questionnaire/replies/reply123",
      }
    }
    questionnaire={
      Object {
        " $refType": null,
        "id": "abc",
        "step": Object {
          " $fragmentRefs": null,
        },
        "viewerReplies": Object {
          "edges": Array [
            Object {
              "node": Object {
                "id": "1",
              },
            },
            Object {
              "node": Object {
                "id": "2",
              },
            },
          ],
          "totalCount": 2,
        },
      }
    }
    resetReplyForm={[MockFunction]}
    submitReplyForm={[MockFunction]}
  />
</ContextProvider>
`;

exports[`<QuestionnaireReplyPage /> renders correctly when not authenticated 1`] = `
<ContextProvider
  value={
    Object {
      "environment": "RelayModernEnvironment()",
    }
  }
>
  <QuestionnaireReplyPage
    dataPrefetch={
      Object {
        "dispose": [MockFunction],
        "getValue": [MockFunction],
        "next": [MockFunction],
        "subscribe": [MockFunction],
      }
    }
    isAuthenticated={false}
    match={
      Object {
        "isExact": false,
        "params": Object {
          "id": "reply123",
        },
        "path": "https://questionnaire/replies/reply123",
        "url": "https://questionnaire/replies/reply123",
      }
    }
    questionnaire={
      Object {
        " $refType": null,
        "id": "abc",
        "step": Object {
          " $fragmentRefs": null,
        },
        "viewerReplies": Object {
          "edges": Array [
            Object {
              "node": Object {
                "id": "1",
              },
            },
            Object {
              "node": Object {
                "id": "2",
              },
            },
          ],
          "totalCount": 2,
        },
      }
    }
    resetReplyForm={[MockFunction]}
    submitReplyForm={[MockFunction]}
  />
</ContextProvider>
`;
